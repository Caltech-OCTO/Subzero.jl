"""
    calc_total_energy(u, v, mass, ξ, moment)

Calculates linear and rotational energy for one timestep given the floe's
velocities, mass, and moment of intertia.
Inputs:
    u       <Vector{Real}> list of floes' u velocities
    v       <Vector{Real}> list of floes' v velocities
    mass    <Vector{Real}> list of floes' masses
    ξ       <Vector{Real}> list of floes' angular velocities
    moment  <Vector{Real}> list of floes' moments of intertia
Outputs:
    linear      <Real> total linear kinetic energy generated by the floes
    rotational  <Real> total rotational kinetic energy generated by the floes
"""
function calc_kinetic_energy(u, v, mass, ξ, moment)
    linear = sum(0.5 * mass .* (u.^2 .+ v.^2))
    rotational = sum(0.5 * moment .* ξ.^2)
    return linear, rotational
end

function calc_linear_momentum(u, v, mass)
    linear_x = mass .* u
    linear_y = mass .* v
    return sum(linear_x), sum(linear_y)
end

"""
    calc_total_momentum(u, v, mass, ξ, moment)

Calculates linear and rotational momentum for one timestep given the floe's
velocities, mass, and moment of intertia.
Inputs:
    u       <Vector{Real}> list of floes' u velocities
    v       <Vector{Real}> list of floes' v velocities
    mass    <Vector{Real}> list of floes' masses
    ξ       <Vector{Real}> list of floes' angular velocities
    moment  <Vector{Real}> list of floes' moments of intertia
Outputs:
    linear      <Real> total linear momentum generated by the floes
    angular     <Real> total angular momentum energy generated by the floes
"""
function calc_angular_momentum(u, v, mass, ξ, moment, x, y)
    angular_spin = moment .* ξ
    angular_orbital = zeros(length(x))
    for i in eachindex(x)
        rvec = [x[i], y[i], 0]
        vvec = [u[i], v[i], 0]
        angular_orbital[i] = mass[i] * cross(rvec, vvec)[3]
    end
    return sum(angular_spin), sum(angular_orbital)
end

function summarize_conservation(
    linear_energy,
    rotational_energy,
    linear_x_momentum,
    linear_y_momentum,
    angular_spin_momentum,
    angular_orbital_momentum,
    dir,
)
    # Energy conservation
    total_energy = linear_energy .+ rotational_energy
    # Plot energy
    plot(
        [total_energy linear_energy rotational_energy],
        title = "Total Kinetic Energy",
        xlabel = "10 Timesteps",
        ylabel = "[N]",
        label=["total energy" "linear energy" "rotational energy"]
    )
    savefig(joinpath(dir, "total_energy_conservation.png"))
    # plot(
    #     [linear_energy],
    #     title = "Total Linear Energy",
    #     xlabel = "10 Timesteps",
    #     ylabel = "[N]",
    #     label=["linear energy"]
    # )
    # savefig(joinpath(dir, "linear_energy.png"))
    # plot(
    #     [rotational_energy],
    #     title = "Total Rotational Energy",
    #     xlabel = "10 Timesteps",
    #     ylabel = "[N]",
    #     label=["rotational energy"]
    # )
    # savefig(joinpath(dir, "rotational_energy.png"))

    # Percent change in energy
    divisor = total_energy[1] != 0 ? total_energy[1] : eps()
    println("Percent change in energy from t=1 to end: ",
        (total_energy[end] - total_energy[1])/divisor * 100
    )

    # Momentum conservation
    # Plot momentum
    plot(
        [linear_x_momentum],
        title = "X Momentum",
        xlabel = "10 Timesteps",
        ylabel = "[N * s]",
        label=["x"]
    )
    savefig(joinpath(dir, "momentum_x_conservation.png"))
    plot(
        [linear_y_momentum],
        title = "Y Momentum",
        xlabel = "10 Timesteps",
        ylabel = "[N * s]",
        label=["y"]
    )
    savefig(joinpath(dir, "momentum_y_conservation.png"))

    total_angular_momentum = angular_spin_momentum .+ angular_orbital_momentum
    total_momentum = total_angular_momentum .+ linear_x_momentum .+ linear_y_momentum
    plot(
        [total_angular_momentum angular_spin_momentum angular_orbital_momentum],
        title = "Angular Momentum",
        xlabel = "10 Timesteps",
        ylabel = "[N * s]",
        label=["Total" "Spin" "Orbital"]
    )
    savefig(joinpath(dir, "momentum_angular_conservation.png"))
    
    # Percent change in momentum
    divisor = total_momentum[1] != 0 ? total_momentum[1] : eps()
    println("Percent change in momentum from t=1 to end: ",
        (total_momentum[end] - total_momentum[1])/divisor * 100
    )
end

"""
    check_energy_momentum_conservation(filename, dir)

Calculates total kinetic energy and momentum at each timestep and plots the
output to check for conservation from floe outputwriter file. Also gives basic
statistics about total changes in energy and momentum.
Inputs:
    filename    <String> floe outputwriter filename + path
    dir         <String> directory to save total energy and momentum
                    conservation plots
Outputs:
    Saves energy and momentum plots over time to given directory. Prints total
    change and percentage change in both energy and momentum.
"""
function check_energy_momentum_conservation_julia(filename, dir)
    file = jldopen(filename, "r")
    tsteps = keys(file["centroid"])
    ntsteps = length(tsteps)
    linear_energy = zeros(ntsteps)
    rotational_energy = zeros(ntsteps)
    linear_x_momentum = zeros(ntsteps)
    linear_y_momentum = zeros(ntsteps)
    angular_spin_momentum = zeros(ntsteps)
    angular_orbital_momentum = zeros(ntsteps)
    for i in eachindex(tsteps)
        t = tsteps[i]
        # Needed values
        parent_idx = file["ghost_id"][t] .== 0
        mass = file["mass"][t][parent_idx]
        moment = file["moment"][t][parent_idx]
        u = file["u"][t][parent_idx]
        v = file["v"][t][parent_idx]
        ξ = file["ξ"][t][parent_idx]
        centroid = file["centroid"][t][parent_idx]
        x = first.(centroid)
        y = last.(centroid)
        # calculations
        linear_energy[i], rotational_energy[i] = calc_kinetic_energy(
            u,
            v,
            mass,
            ξ,
            moment,
        )
        linear_x_momentum[i], linear_y_momentum[i] = calc_linear_momentum(
            u,
            v,
            mass,
        )
        angular_spin_momentum[i], angular_orbital_momentum[i] = calc_angular_momentum(
            u,
            v,
            mass,
            ξ,
            moment,
            x,
            y,
        )
    end
    close(file)
    summarize_conservation(
        linear_energy,
        rotational_energy,
        linear_x_momentum,
        linear_y_momentum,
        angular_spin_momentum,
        angular_orbital_momentum,
        dir,
    )
end


#mat_path = "/Users/skylargering/src/SubZero/Floes"

function check_energy_momentum_conservation_matlab(mat_path, dir)
    mat_files = readdir(mat_path)
    mat_files = mat_files[last.(splitext.(mat_files)) .== ".mat"]
    ntsteps = length(mat_files)
    linear_energy = zeros(ntsteps)
    rotational_energy = zeros(ntsteps)
    linear_x_momentum = zeros(ntsteps)
    linear_y_momentum = zeros(ntsteps)
    angular_spin_momentum = zeros(ntsteps)
    angular_orbital_momentum = zeros(ntsteps)
    for i in eachindex(mat_files)
        mat_data = matread(joinpath(mat_path, mat_files[i]))
        # Needed values
        mass = mat_data["Floe"]["mass"]'
        moment = mat_data["Floe"]["inertia_moment"]'
        u = mat_data["Floe"]["Ui"]'
        v = mat_data["Floe"]["Vi"]'
        ξ = mat_data["Floe"]["ksi_ice"]'
        x = mat_data["Floe"]["Xi"]'
        y = mat_data["Floe"]["Yi"]'
        # calculations
        linear_energy[i], rotational_energy[i] = calc_kinetic_energy(
            u,
            v,
            mass,
            ξ,
            moment,
        )
        linear_x_momentum[i], linear_y_momentum[i]= calc_linear_momentum(
            u,
            v,
            mass,
        )
        angular_spin_momentum[i], angular_orbital_momentum[i] = calc_angular_momentum(
            u,
            v,
            mass,
            ξ,
            moment,
            x,
            y,
        )
    end
    summarize_conservation(
        linear_energy,
        rotational_energy,
        linear_x_momentum,
        linear_y_momentum,
        angular_spin_momentum,
        angular_orbital_momentum,
        dir,
    )
end